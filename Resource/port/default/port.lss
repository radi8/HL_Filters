
port.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000012a  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000002a  00000000  00000000  0000014a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000017e  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000ec  00000000  00000000  000002f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000182  00000000  00000000  000003de  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  00000560  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000b8  00000000  00000000  00000590  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000068  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  000006b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <readButton>:

return 0;
}

uint8_t readButton(void){
	if((PIND & (1<<PD2)) == 0){        	//If the button was pressed
  80:	4a 99       	sbic	0x09, 2	; 9
  82:	09 c0       	rjmp	.+18     	; 0x96 <readButton+0x16>
  84:	8a ef       	ldi	r24, 0xFA	; 250
  86:	90 e0       	ldi	r25, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  88:	20 e9       	ldi	r18, 0x90	; 144
  8a:	31 e0       	ldi	r19, 0x01	; 1
  8c:	f9 01       	movw	r30, r18
  8e:	31 97       	sbiw	r30, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <readButton+0xe>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  92:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  94:	d9 f7       	brne	.-10     	; 0x8c <readButton+0xc>
 		_delay_ms(25); }        		//Debounce the read value
 	if((PIND & (1<<PD2)) == 0){        	//Verify that the value is the same that what was read
  96:	89 b1       	in	r24, 0x09	; 9
  98:	86 95       	lsr	r24
  9a:	86 95       	lsr	r24
  9c:	80 95       	com	r24
 		return 1; }            			//If it is still 0 its because we had a button press
 	else{                    			//If the value is different the press is invalid
 		return 0; }
}
  9e:	81 70       	andi	r24, 0x01	; 1
  a0:	08 95       	ret

000000a2 <main>:
#define F_CPU 16000000UL    	//This says to the compiler at what frequency our Atmega is running, in this case its 16Mhz
#include <util/delay.h>      	//The delay functions/routines

uint8_t readButton(void);   	//Declaration of the readButton function

int main(void){
  a2:	1f 93       	push	r17
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
DDRD &= ~(1<<PD2);    	//Configure PORTD pin 2 as an input
  a8:	52 98       	cbi	0x0a, 2	; 10
PORTD |= (1<<PD2);    	//Activate pull-ups in PORTD pin 2
  aa:	5a 9a       	sbi	0x0b, 2	; 11
DDRB |= (1<<PB5);    	//Configure PORTB pin 5 an output, this is the digital 13 in the Arduino that as the built-in led
  ac:	25 9a       	sbi	0x04, 5	; 4

	while(1){                		//Infinite loop
		if(readButton()==1){        //Verify the button state
			PORTB ^=(1<<PB5);    	//This is the above mentioned XOR that toggles the led
  ae:	10 e2       	ldi	r17, 0x20	; 32
  b0:	c0 e9       	ldi	r28, 0x90	; 144
  b2:	d1 e0       	ldi	r29, 0x01	; 1
DDRD &= ~(1<<PD2);    	//Configure PORTD pin 2 as an input
PORTD |= (1<<PD2);    	//Activate pull-ups in PORTD pin 2
DDRB |= (1<<PB5);    	//Configure PORTB pin 5 an output, this is the digital 13 in the Arduino that as the built-in led

	while(1){                		//Infinite loop
		if(readButton()==1){        //Verify the button state
  b4:	0e 94 40 00 	call	0x80	; 0x80 <readButton>
  b8:	81 30       	cpi	r24, 0x01	; 1
  ba:	19 f4       	brne	.+6      	; 0xc2 <main+0x20>
			PORTB ^=(1<<PB5);    	//This is the above mentioned XOR that toggles the led
  bc:	85 b1       	in	r24, 0x05	; 5
  be:	81 27       	eor	r24, r17
  c0:	85 b9       	out	0x05, r24	; 5
  c2:	84 ec       	ldi	r24, 0xC4	; 196
  c4:	99 e0       	ldi	r25, 0x09	; 9
  c6:	fe 01       	movw	r30, r28
  c8:	31 97       	sbiw	r30, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <main+0x26>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  cc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ce:	91 f3       	breq	.-28     	; 0xb4 <main+0x12>
  d0:	fa cf       	rjmp	.-12     	; 0xc6 <main+0x24>

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>
